'------------------------------------------------------------------------
' Paulo Silva - sep2004 (started feb2000 on Amos) - GPL licence
' First sdlBasic converted version and help from Roberto Viola (Vroby)
' Ibanez guitar string samples from Otis/Perseus (Aminet)
' Pitchshifted wav samples created from SoundStretch (Olli Parviainen)
' samples converted to 11khz with Sox (sox.sourceforge.net)
' This is an example would be an idea for guitar melodies (not chords)
'   composing interface
' Goal would be, for example, composing .mod documents (or germanic notation
'   txt files) with it
' Bug:
'    - tablature can't be writed
' ToDo:
'   1- tab and modplugtracker-clipboard (as text) export
'   2- tablature playback
'   3- using interface.sdlblib for some stuff (export buttons...)
'   4- tablature display more useful (now only showing where should be)
'--------------------------------------------------------------------

'- include "interface.sdlblib

function tbqlv$(n)
   tbqlv$=right$("--"+str$(n),2)
 end function
function nttnt$(b)
   a$="...C-1C+1D-1D+1E-1F-1F+1G-1G+1A-1A+1B-1"
   a$=a$+"C-2C+2D-2D+2E-2F-2F+2G-2G+2A-2A+2B-2"
   a$=a$+"C-3C+3D-3D+3E-3F-3F+3G-3G+3A-3A+3B-3"
   a$=a$+"C-4C+4D-4D+4E-4F-4F+4G-4G+4A-4A+4B-4"
   a$=a$+"C-5C+5D-5D+5E-5F-5F+5G-5G+5A-5A+5B-5"
   a$=a$+"C-6C+6D-6D+6E-6F-6F+6G-6G+6A-6A+6B-6"
   a$=a$+"C-7C+7D-7D+7E-7F-7F+7G-7G+7A-7A+7B-7"
     tmpr$=mid$ (a$,(b*3)+1,3)
     nttnt$=tmpr$
 end function

  xof=-10:yof=90:vflg=0:ntadj=-5:crtrt=0
  dim stg$[6],stgvl[16]

for i=0 to 15:stgvl[i]=0:next

sub updstg
   paper (0xFFFFFF):for i=0 to 5:locate (1,1+i)
   prints(left$(stg$[i],49)):next
 end sub
  setdisplay(640,148,32,1):paper (0xEEDDCC):ink(0):pen(0):cls:mousehide

loadimage("sprites.png",1):pasteicon(0,0,1)
grab(2,0,0,16,16):grab(3,16,0,16,16):grab(4,32,0,32,8):grab(5,32,8,32,8)
cls :loadimage("guitararm.png",1):pasteicon(0,96,1)

for i=0 to 5:stg$[i]=string$(64,45):next

  updstg:setcaption("Guitar Simulation on sdlBasic")
while(key(27)=0)
   xmt=xmouse:ymt=ymouse:bmt=bmouse
   xf1=(xmt-xof)\32: yf1=5-((ymt-yof)\6)
     If xf1<0 Then:xf1=0:end if
     If yf1<0 Then:yf1=0:end if
     If yf1>5 Then:yf1=5:end if
     If xf1>15 Then:xf1=15:end if
   ymt2=((5-yf1)*6)+yof
       nte=int((yf1*5)+xf1+16)
   waitvbl:Locate(61,1)
     Prints(right$("00"+str$(int(xf1)),2)+":"+str$(int(yf1))+":"+str$(bmt)+":"+str$(nte))
   Locate(61,2):prints(nttnt$(nte))

     If bmt=1 then:Bob (1,xmt,ymt2+1,3):Bob (2,600,ymt2+7,5)
        If vflg=0 then
          nte2a=nte+ntadj:gwav$=right$("00"+str$(nte2a),2)+".wav"
          loadmusic (gwav$):playmusic(1):vflg=1

'- teste: inicio: ver se crasha (
  stmx=16
  stgvl[crtrt]=nte
for i=0 to 5
     z1$=mid$(stg$[i],1,((crtrt*3)+1))
     z2$=mid$(stg$[i],(((crtrt+1)*3)+1),((((stmx-1)-crtrt)*3)+1))

    'z2$=mid$(stg$[i],(((crtrt+1)*3)+1))
    'z2$=left$(z2$,((((stmx-1)-crtrt)*3)+1))

     'print stg$[i]
     'print len(stg$[i])
     'print z2$
     'print len(z2$)

    'z2$=z2$
     zm$="--"
     if i=int(yf1) then: zm$=tbqlv$(nte):end if
     'print z1$+zm$+z2$+"--------"
     stg$[i]=z1$+zm$+z2$+"---------"
     print len(stg$[i])
     locate(1,1+i):prints(right$(stg$[i],49))
     'locate(1,1+i):prints(mid$(stg$[i],len(stg$[i])-49))

next
   crtrt=crtrt+1:if crtrt>15 then:crtrt=0:end if
'- teste: fim )

          end if
     Else:Bob (1,xmt,ymt2+1,2):Bob (2,600,ymt2+8,4):vflg=0:End If
 end while


